generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  phone         String?
  age           Int?
  gender        String?
  location      String?
  preferredLanguage String? @default("en")
  userType      String    @default("patient") // patient, student
  theme         String    @default("light") // light, dark
  
  // Physical Details
  height        Float?    // in cm
  weight        Float?    // in kg
  bloodGroup    String?
  
  // Medical History (for patients)
  medicalHistory String?  @db.Text
  currentMedications String? @db.Text
  allergies     String?
  chronicConditions String?
  
  // Educational Details (for students)
  targetExam    String?   // neet-ug, neet-pg, aiims, etc.
  currentYear   String?   // 1st year, 2nd year, etc.
  medicalCollege String?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  chatSessions  ChatSession[]

  medications   Medication[]
  healthRecords HealthRecord[]
  appointments  Appointment[]
  mockTests     MockTest[]
  studyPlans    StudyPlan[]
  emergencyContacts EmergencyContact[]
  vaccinations  Vaccination[]
  familyMembers FamilyMember[]
}

model Medication {
  id          String   @id @default(cuid())
  userId      String
  name        String
  dosage      String
  frequency   String   // daily, twice, etc.
  startDate   DateTime
  endDate     DateTime?
  reminders   String[] // times like ["08:00", "20:00"]
  notes       String?
  isActive    Boolean  @default(true)
  aiAnalysis  String?  // JSON string for AI analysis
  createdAt   DateTime @default(now())
  
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model HealthRecord {
  id          String   @id @default(cuid())
  userId      String
  type        String   // bmi, bp, glucose, weight, etc.
  value       String   // JSON string for complex values
  unit        String?
  notes       String?
  recordedAt  DateTime @default(now())
  
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model HealthData {
  id          String   @id @default(cuid())
  userEmail   String
  type        String   // bmi, blood_pressure, glucose, heart_rate
  value       String   // JSON string for values
  analysis    String   // JSON string for AI analysis
  createdAt   DateTime @default(now())
}

model Appointment {
  id          String   @id @default(cuid())
  userId      String
  doctorName  String
  specialty   String
  hospital    String
  date        DateTime
  time        String
  type        String   // consultation, checkup, followup
  status      String   @default("scheduled") // scheduled, completed, cancelled
  notes       String?
  createdAt   DateTime @default(now())
  
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MockTest {
  id          String   @id @default(cuid())
  userId      String
  examType    String   // neet-ug, neet-pg, etc.
  subject     String
  score       Int
  totalQuestions Int
  correctAnswers Int
  timeSpent   Int      // in minutes
  completedAt DateTime @default(now())
  answers     String   @db.Text // JSON string
  
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model StudyPlan {
  id          String   @id @default(cuid())
  userId      String
  examType    String
  subject     String
  topic       String
  scheduledDate DateTime
  duration    Int      // in minutes
  status      String   @default("pending") // pending, completed, skipped
  notes       String?
  createdAt   DateTime @default(now())
  
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmergencyContact {
  id          String   @id @default(cuid())
  userId      String
  name        String
  type        String   // hospital, ambulance, doctor, family
  phone       String
  address     String?
  specialty   String?  // for doctors
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Vaccination {
  id          String   @id @default(cuid())
  userId      String
  vaccineName String
  doseNumber  Int
  givenDate   DateTime?
  dueDate     DateTime?
  location    String?
  batchNumber String?
  status      String   @default("due") // due, completed, overdue
  notes       String?
  createdAt   DateTime @default(now())
  
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FamilyMember {
  id          String   @id @default(cuid())
  userId      String   // main user
  name        String
  relation    String   // father, mother, spouse, child
  age         Int?
  gender      String?
  bloodGroup  String?
  medicalHistory String? @db.Text
  allergies   String?
  createdAt   DateTime @default(now())
  
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ChatSession {
  id          String   @id @default(cuid())
  userId      String
  title       String
  type        String   @default("medical") // medical, student, symptom
  language    String   @default("en")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages    Message[]
}

model Message {
  id            String   @id @default(cuid())
  chatSessionId String
  role          String   // user, assistant
  content       String   @db.Text
  language      String   @default("en")
  translation   String?  @db.Text
  createdAt     DateTime @default(now())

  chatSession   ChatSession @relation(fields: [chatSessionId], references: [id], onDelete: Cascade)
}



model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model MedicalImage {
  id          String   @id @default(cuid())
  userId      String
  filename    String
  originalName String
  type        String   // xray, blood_report, ecg, prescription
  analysis    String?  @db.Text
  uploadedAt  DateTime @default(now())
}

model Doctor {
  id          String   @id @default(cuid())
  name        String
  specialty   String
  qualification String
  experience  Int
  hospital    String
  location    String
  phone       String
  email       String?
  rating      Float    @default(0)
  consultationFee Float?
  isVerified  Boolean  @default(false)
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
}

model HealthTip {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text
  category    String   // general, diet, exercise, mental_health
  language    String   @default("en")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
}

model ForumPost {
  id          String   @id @default(cuid())
  userId      String
  title       String
  content     String   @db.Text
  category    String   // general, symptoms, treatment, student
  isAnonymous Boolean  @default(false)
  likes       Int      @default(0)
  replies     Int      @default(0)
  isModerated Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ForumReply {
  id          String   @id @default(cuid())
  postId      String
  userId      String
  content     String   @db.Text
  likes       Int      @default(0)
  isModerated Boolean  @default(false)
  createdAt   DateTime @default(now())
}